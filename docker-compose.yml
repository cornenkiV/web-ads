version: '3.8'

services:
  db:
    image: postgres:14-alpine
    container_name: ads-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s 

  backend:
    container_name: ads-backend
    build:
      context: ./backend
    ports:
      - "8080:8080"
    environment:
      - DB_URL=${DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
      - DB_CREATE_DROP=${DB_CREATE_DROP}
      - RATE_LIMIT_AUTH_CAPACITY=${RATE_LIMIT_AUTH_CAPACITY}
      - RATE_LIMIT_AUTH_TIME=${RATE_LIMIT_AUTH_TIME}
      - RATE_LIMIT_AUTH_UNIT=${RATE_LIMIT_AUTH_UNIT}
      - RATE_LIMIT_ADS_CAPACITY=${RATE_LIMIT_ADS_CAPACITY}
      - RATE_LIMIT_ADS_TIME=${RATE_LIMIT_ADS_TIME}
      - RATE_LIMIT_ADS_UNIT=${RATE_LIMIT_ADS_UNIT}
      - DB_SEED=${DB_SEED}

    depends_on:
      db:
        condition: service_healthy

  frontend:
    container_name: ads-frontend
    build:
      context: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - backend

volumes:
  postgres_data: